/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  /**
   * (Required) This specifies the version of the Rush engine to be used in this repo.
   * Rush's "version selector" feature ensures that the globally installed tool will
   * behave like this release, regardless of which version is installed globally.
   *
   * The common/scripts/install-run-rush.js automation script also uses this version.
   *
   * NOTE: If you upgrade to a new major version of Rush, you should replace the "v5"
   * path segment in the "$schema" field for all your Rush config files.  This will ensure
   * correct error-underlining and tab-completion for editors such as VS Code.
   */
  "rushVersion": "5.76.1",
  /**
   * The next field selects which package manager should be installed and determines its version.
   * Rush installs its own local copy of the package manager to ensure that your build process
   * is fully isolated from whatever tools are present in the local environment.
   *
   * Specify one of: "pnpmVersion", "npmVersion", or "yarnVersion".  See the Rush documentation
   * for details about these alternatives.
   */
  "pnpmVersion": "6.7.1",
  // "npmVersion": "6.14.15",
  // "yarnVersion": "1.9.4",
  /**
   * Options that are only used when the PNPM package manager is selected
   */
  "pnpmOptions": {
    /**
     * Specifies the location of the PNPM store.  There are two possible values:
     *
     * - "local" - use the "pnpm-store" folder in the current configured temp folder:
     *   "common/temp/pnpm-store" by default.
     * - "global" - use PNPM's global store, which has the benefit of being shared
     *    across multiple repo folders, but the disadvantage of less isolation for builds
     *    (e.g. bugs or incompatibilities when two repos use different releases of PNPM)
     *
     * RUSH_PNPM_STORE_PATH will override the directory that will be used as the store
     *
     * In all cases, the store path will be overridden by the environment variable RUSH_PNPM_STORE_PATH.
     *
     * The default value is "local".
     */
    // "pnpmStore": "local",
    /**
     * If true, then Rush will add the "--strict-peer-dependencies" option when invoking PNPM.
     * This causes "rush install" to fail if there are unsatisfied peer dependencies, which is
     * an invalid state that can cause build failures or incompatible dependency versions.
     * (For historical reasons, JavaScript package managers generally do not treat this invalid
     * state as an error.)
     *
     * The default value is false to avoid legacy compatibility issues.
     * It is strongly recommended to set strictPeerDependencies=true.
     */
    "strictPeerDependencies": true,
    /**
     * Configures the strategy used to select versions during installation.
     *
     * This feature requires PNPM version 3.1 or newer.  It corresponds to the "--resolution-strategy" command-line
     * option for PNPM.  Possible values are "fast" and "fewer-dependencies".  PNPM's default is "fast", but this may
     * be incompatible with certain packages, for example the "@types" packages from DefinitelyTyped.  Rush's default
     * is "fewer-dependencies", which causes PNPM to avoid installing a newer version if an already installed version
     * can be reused; this is more similar to NPM's algorithm.
     *
     * After modifying this field, it's recommended to run "rush update --full" so that the package manager
     * will recalculate all version selections.
     */
    // "resolutionStrategy": "fast",
    /**
     * If true, then `rush install` will report an error if manual modifications
     * were made to the PNPM shrinkwrap file without running "rush update" afterwards.
     *
     * This feature protects against accidental inconsistencies that may be introduced
     * if the PNPM shrinkwrap file ("pnpm-lock.yaml") is manually edited.  When this
     * feature is enabled, "rush update" will append a hash to the file as a YAML comment,
     * and then "rush update" and "rush install" will validate the hash.  Note that this does not prohibit
     * manual modifications, but merely requires "rush update" be run
     * afterwards, ensuring that PNPM can report or repair any potential inconsistencies.
     *
     * To temporarily disable this validation when invoking "rush install", use the
     * "--bypass-policy" command-line parameter.
     *
     * The default value is false.
     */
    // "preventManualShrinkwrapChanges": true,
    /**
     * If true, then `rush install` will use the PNPM workspaces feature to perform the
     * install.
     *
     * This feature uses PNPM to perform the entire monorepo install. When using workspaces, Rush will
     * generate a "pnpm-workspace.yaml" file referencing all local projects to install. Rush will
     * also generate a "pnpmfile.js" which is used to provide preferred versions support. When install
     * is run, this pnpmfile will be used to replace dependency version ranges with a smaller subset
     * of the original range. If the preferred version is not fully a subset of the original version
     * range, it will be left as-is. After this, the pnpmfile.js provided in the repository (if one
     * exists) will be called to further modify package dependencies.
     *
     * This option is experimental. The default value is false.
     */
    "useWorkspaces": true
  },
  /**
   * Older releases of the Node.js engine may be missing features required by your system.
   * Other releases may have bugs.  In particular, the "latest" version will not be a
   * Long Term Support (LTS) version and is likely to have regressions.
   *
   * Specify a SemVer range to ensure developers use a Node.js version that is appropriate
   * for your repo.
   *
   * LTS schedule: https://nodejs.org/en/about/releases/
   * LTS versions: https://nodejs.org/en/download/releases/
   */
  "nodeSupportedVersionRange": ">=12.13.0 <13.0.0 || >=14.15.0 <15.0.0 || >=16.13.0 <17.0.0",
  "approvedPackagesPolicy": {
    "reviewCategories": [
      // Some example categories:
      "production", // projects that ship to production
      "tools", // non-shipping projects that are part of the developer toolchain
      "prototypes",
      "libraries" // experiments that should mostly be ignored by the review process
    ],
    /**
     * A list of NPM package scopes that will be excluded from review.
     * We recommend to exclude TypeScript typings (the "@types" scope), because
     * if the underlying package was already approved, this would imply that the typings
     * are also approved.
     */
    // "ignoredNpmScopes": ["@types"]
  },
  /**
   * If you use Git as your version control system, this section has some additional
   * optional features you can use.
   */
  "gitPolicy": {},
  "repository": {
    /**
     * The URL of this Git repository, used by "rush change" to determine the base branch for your PR.
     *
     * The "rush change" command needs to determine which files are affected by your PR diff.
     * If you merged or cherry-picked commits from the main branch into your PR branch, those commits
     * should be excluded from this diff (since they belong to some other PR).  In order to do that,
     * Rush needs to know where to find the base branch for your PR.  This information cannot be
     * determined from Git alone, since the "pull request" feature is not a Git concept.  Ideally
     * Rush would use a vendor-specific protocol to query the information from GitHub, Azure DevOps, etc.
     * But to keep things simple, "rush change" simply assumes that your PR is against the "main" branch
     * of the Git remote indicated by the repository.url setting in rush.json.  If you are working in
     * a GitHub "fork" of the real repo, this setting will be different from the repository URL of your
     * your PR branch, and in this situation "rush change" will also automatically invoke "git fetch"
     * to retrieve the latest activity for the remote main branch.
     */
    // "url": "https://github.com/microsoft/rush-example",
    /**
     * The default branch name. This tells "rush change" which remote branch to compare against.
     * The default value is "main"
     */
    // "defaultBranch": "main",
    /**
     * The default remote. This tells "rush change" which remote to compare against if the remote URL is
     * not set or if a remote matching the provided remote URL is not found.
     */
    // "defaultRemote": "origin"
  },
  /**
   * Event hooks are customized script actions that Rush executes when specific events occur
   */
  "eventHooks": {
    /**
     * The list of shell commands to run before the Rush installation starts
     */
    "preRushInstall": [
      // "common/scripts/pre-rush-install.js"
    ],
    /**
     * The list of shell commands to run after the Rush installation finishes
     */
    "postRushInstall": [],
    /**
     * The list of shell commands to run before the Rush build command starts
     */
    "preRushBuild": [],
    /**
     * The list of shell commands to run after the Rush build command finishes
     */
    "postRushBuild": []
  },
  /**
   * Installation variants allow you to maintain a parallel set of configuration files that can be
   * used to build the entire monorepo with an alternate set of dependencies.  For example, suppose
   * you upgrade all your projects to use a new release of an important framework, but during a transition period
   * you intend to maintain compatibility with the old release.  In this situation, you probably want your
   * CI validation to build the entire repo twice: once with the old release, and once with the new release.
   *
   * Rush "installation variants" correspond to sets of config files located under this folder:
   *
   *   common/config/rush/variants/<variant_name>
   *
   * The variant folder can contain an alternate common-versions.json file.  Its "preferredVersions" field can be used
   * to select older versions of dependencies (within a loose SemVer range specified in your package.json files).
   * To install a variant, run "rush install --variant <variant_name>".
   *
   * For more details and instructions, see this article:  https://rushjs.io/pages/advanced/installation_variants/
   */
  "variants": [
    // {
    //   /**
    //    * The folder name for this variant.
    //    */
    //   "variantName": "old-sdk",
    // 
    //   /**
    //    * An informative description
    //    */
    //   "description": "Build this repo using the previous release of the SDK"
    // }
  ],
  /**
   * Rush can collect anonymous telemetry about everyday developer activity such as
   * success/failure of installs, builds, and other operations.  You can use this to identify
   * problems with your toolchain or Rush itself.  THIS TELEMETRY IS NOT SHARED WITH MICROSOFT.
   * It is written into JSON files in the common/temp folder.  It's up to you to write scripts
   * that read these JSON files and do something with them.  These scripts are typically registered
   * in the "eventHooks" section.
   */
  // "telemetryEnabled": false,
  /**
   * Allows creation of hotfix changes. This feature is experimental so it is disabled by default.
   * If this is set, 'rush change' only allows a 'hotfix' change type to be specified. This change type
   * will be used when publishing subsequent changes from the monorepo.
   */
  // "hotfixChangeEnabled": false,
  /**
    * This is an optional, but recommended, list of available tags that can be applied
    * to projects. If this property is not specified, any tag is allowed. This
    * list is useful in preventing typos when specifying tags for projects.
    */
  // "allowedProjectTags": [ "apps", "Web", "tools" ],
  /**
   * (Required) This is the inventory of projects to be managed by Rush.
   *
   * Rush does not automatically scan for projects using wildcards, for a few reasons:
   * 1. Depth-first scans are expensive, particularly when tools need to repeatedly collect the list.
   * 2. On a caching CI machine, scans can accidentally pick up files left behind from a previous build.
   * 3. It's useful to have a centralized inventory of all projects and their important metadata.
   */
  "projects": [
    {
      "packageName": "@marin/tss",
      "projectFolder": "rigs/typescript",
      "reviewCategory": "libraries",
      "shouldPublish": false
    },
    {
      "packageName": "@marin/jest",
      "projectFolder": "rigs/jest",
      "reviewCategory": "libraries",
      "shouldPublish": false
    },
    {
      "packageName": "@marin/eslint-settings",
      "projectFolder": "rigs/eslint",
      "reviewCategory": "libraries",
      "shouldPublish": false
    },
    {
      "packageName": "@marin/api",
      "projectFolder": "packages/nest-api",
      "reviewCategory": "production",
      "decoupledLocalDependencies": []
    },
    {
      "packageName": "@marin/my-controls",
      "projectFolder": "packages/my-controls",
      "reviewCategory": "production",
      "tags": [
        "libraries",
        "web"
      ]
    }
  ]
}